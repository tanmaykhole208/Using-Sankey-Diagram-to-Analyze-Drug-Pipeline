

%macro sankey2html(in_data=, outfl=, width=, height=, flow_num=);

	data _null_;
	 file "&outfl.";
	put '<!DOCTYPE html>';
	put '<html>';
	put '<head>';
	put '  <meta http-equiv="content-type" content="text/html; charset=UTF-8">';
	put '  <title></title>';
	put '  <meta http-equiv="content-type" content="text/html; charset=UTF-8">';
	put '  <meta name="robots" content="noindex, nofollow">';
	put '  <meta name="googlebot" content="noindex, nofollow">';
	put '  <meta name="viewport" content="width=device-width, initial-scale=1">';
	put ' '; 
	put ' ';
	put '  <script';
	put '    type="text/javascript"';
	put '    src="https://d3js.org/d3.v3.js"';
	put '    ';
	put '  ></script>';
	put ' ';
	put '    <link rel="stylesheet" type="text/css" href="https://fiddle.jshell.net/css/result-light.css">';
	put ' ';
	put ' ';
	put '  <style id="compiled-css" type="text/css">';
	put '      .node rect {';
	put '    cursor: move;';
	put '}';
	put '.link {';
	put '    fill: none;';
	put '    stroke: #000;';
	put '    stroke-opacity: .2;';
	put '}';
	put '.link:hover {';
	put '    stroke-opacity: .5;';
	put '} ';
	put ' * {';
	put '    font: 11px sans-serif;';
	put '}';
	put '.linkLabel {';
	put '    z-index:10;';
	put '}';
	put ' ';
	put '  </style>';
	put ' ';
	put ' ';
	put '  <!-- TODO: Missing CoffeeScript 2 -->';
	put ' ';
	put '  <script type="text/javascript">//<![CDATA['; 
	put ' ';
	put '    window.onload=function(){';
	put '      ';
	put 'd3.sankey = function () {';
	put '    var sankey = {},';
	put '    nodeWidth = 24,';
	put '        nodePadding = 8,';
	put '        size = [1, 1],';
	put '        nodes = [],';
	put '        links = [];';
	put ' ';
	put '    sankey.nodeWidth = function (_) {';
	put '        if (!arguments.length) return nodeWidth;';
	put '        nodeWidth = +_;';
	put '        return sankey;';
	put '    };';
	put ' ';
	put '    sankey.nodePadding = function (_) {';
	put '        if (!arguments.length) return nodePadding;';
	put '        nodePadding = +_;';
	put '        return sankey;';
	put '    };';
	put ' ';
	put '    sankey.nodes = function (_) {';
	put '        if (!arguments.length) return nodes;';
	put '        nodes = _;';
	put '        return sankey;';
	put '    };';
	put ' ';
	put '    sankey.links = function (_) {';
	put '        if (!arguments.length) return links;';
	put '        links = _;';
	put '        return sankey;';
	put '    };';
	put ' ';
	put '    sankey.size = function (_) {';
	put '        if (!arguments.length) return size;';
	put '        size = _;';
	put '        return sankey;';
	put '    };';
	put ' ';
	put '    sankey.layout = function (iterations) {';
	put '        computeNodeLinks();';
	put '        computeNodeValues();';
	put '        computeNodeBreadths();';
	put '        computeNodeDepths(iterations);';
	put '        computeLinkDepths();';
	put '        return sankey;';
	put '    };';
	put ' ';
	put '    sankey.relayout = function () {';
	put '        computeLinkDepths();';
	put '        return sankey;';
	put '    };';
	put ' ';
	put '    sankey.link = function () {';
	put '        var curvature = .5;';
	put ' ';
	put '        function link(d) {';
	put '            var x0 = d.source.x + d.source.dx,';
	put '                x1 = d.target.x,';
	put '                xi = d3.interpolateNumber(x0, x1),';
	put '                x2 = xi(curvature),';
	put '                x3 = xi(1 - curvature),';
	put '                y0 = d.source.y + d.sy + d.dy / 2,';
	put '                y1 = d.target.y + d.ty + d.dy / 2;';
	put '            return "M" + x0 + "," + y0 + "C" + x2 + "," + y0 + " " + x3 + "," + y1 + " " + x1 + "," + y1;';
	put '        }';
	put ' ';
	put '        link.curvature = function (_) {';
	put '            if (!arguments.length) return curvature;';
	put '            curvature = +_;';
	put '            return link;';
	put '        };';
	put ' ';
	put '        return link;';
	put '    };';
	put ' ';
	put '    // Populate the sourceLinks and targetLinks for each node.'; 
	put '    // Also, if the source and target are not objects, assume they are indices.';
	put '    function computeNodeLinks() {';
	put '        nodes.forEach(function (node) {';
	put '            node.sourceLinks = [];';
	put '            node.targetLinks = [];';
	put '        });';
	put '        links.forEach(function (link) {';
	put '            var source = link.source,';
	put '                target = link.target;';
	put '            if (typeof source === "number") source = link.source = nodes[link.source];';
	put '            if (typeof target === "number") target = link.target = nodes[link.target];';
	put '            source.sourceLinks.push(link);';
	put '            target.targetLinks.push(link);';
	put '        });';
	put '    }';
	put ' ';
	put '    // Compute the value (size) of each node by summing the associated links.';
	put '    function computeNodeValues() {';
	put '        nodes.forEach(function (node) {';
	put '            node.value = Math.max(';
	put '            d3.sum(node.sourceLinks, value),';
	put '            d3.sum(node.targetLinks, value));';
	put '        });';
	put '    }';
	put ' ';
	put '    // Iteratively assign the breadth (x-position) for each node.';
	put '    // Nodes are assigned the maximum breadth of incoming neighbors plus one;';
	put '    // nodes with no incoming links are assigned breadth zero, while';
	put '    // nodes with no outgoing links are assigned the maximum breadth.';
	put '    function computeNodeBreadths() {';
	put '        var remainingNodes = nodes,';
	put '            nextNodes,';
	put '            x = 0;';
	put ' ';
	put '        while (remainingNodes.length) {';
	put '            nextNodes = [];';
	put '            remainingNodes.forEach(function (node) {';
	put '                node.x = x;';
	put '                node.dx = nodeWidth;';
	put '                node.sourceLinks.forEach(function (link) {';
	put '                    nextNodes.push(link.target);';
	put '                });';
	put '            });';
	put '            remainingNodes = nextNodes;';
	put '            ++x;';
	put '        }';
	put ' ';
	put '        //';
	put '        moveSinksRight(x);';
	put '        scaleNodeBreadths((width - nodeWidth) / (x - 1));';
	put '    }';
	put ' ';
	put '    function moveSourcesRight() {';
	put '        nodes.forEach(function (node) {';
	put '            if (!node.targetLinks.length) {';
	put '                node.x = d3.min(node.sourceLinks, function (d) {';
	put '                    return d.target.x;';
	put '                }) - 1;';
	put '            }';
	put '        });';
	put '    }';
	put ' ';
	put '    function moveSinksRight(x) {';
	put '        nodes.forEach(function (node) {';
	put '            if (!node.sourceLinks.length) {';
	put '                node.x = x - 1;';
	put '            }';
	put '        });';
	put '    }';
	put ' ';
	put '    function scaleNodeBreadths(kx) {';
	put '        nodes.forEach(function (node) {';
	put '            node.x *= kx;';
	put '        });';
	put '    }';
	put ' ';
	put '    function computeNodeDepths(iterations) {';
	put '        var nodesByBreadth = d3.nest()';
	put '            .key(function (d) {';
	put '            return d.x;';
	put '        })';
	put '            .sortKeys(d3.ascending)';
	put '            .entries(nodes)';
	put '            .map(function (d) {';
	put '            return d.values;';
	put '        });';
	put ' ';
	put '        //';
	put '        initializeNodeDepth();';
	put '        resolveCollisions();';
	put '        for (var alpha = 1; iterations > 0; --iterations) {';
	put '            relaxRightToLeft(alpha *= .99);';
	put '            resolveCollisions();';
	put '            relaxLeftToRight(alpha);';
	put '            resolveCollisions();';
	put '        }';
	put ' ';
	put '        function initializeNodeDepth() {';
	put '            var ky = d3.min(nodesByBreadth, function (nodes) {';
	put '                return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);';
	put '            });';
	put ' ';
	put '            nodesByBreadth.forEach(function (nodes) {';
	put '                nodes.forEach(function (node, i) {';
	put '                    node.y = i;';
	put '                    node.dy = node.value * ky;';
	put '                });';
	put '            });';
	put ' ';
	put '            links.forEach(function (link) {';
	put '                link.dy = link.value * ky;';
	put '            });';
	put '        }';
	put ' ';
	put '        function relaxLeftToRight(alpha) {';
	put '            nodesByBreadth.forEach(function (nodes, breadth) {';
	put '                nodes.forEach(function (node) {';
	put '                    if (node.targetLinks.length) {';
	put '                        var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);';
	put '                        node.y += (y - center(node)) * alpha;';
	put '                    }';
	put '                });';
	put '            });';
	put ' ';
	put '            function weightedSource(link) {';
	put '                return center(link.source) * link.value;';
	put '            }';
	put '        }';
	put ' ';
	put '        function relaxRightToLeft(alpha) {';
	put '            nodesByBreadth.slice().reverse().forEach(function (nodes) {';
	put '                nodes.forEach(function (node) {';
	put '                    if (node.sourceLinks.length) {';
	put '                        var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);';
	put '                        node.y += (y - center(node)) * alpha;';
	put '                    }';
	put '                });';
	put '            });';
	put ' ';
	put '            function weightedTarget(link) {';
	put '                return center(link.target) * link.value;';
	put '            }';
	put '        }';
	put ' ';
	put '        function resolveCollisions() {';
	put '            nodesByBreadth.forEach(function (nodes) {';
	put '                var node,';
	put '                dy,';
	put '                y0 = 0,';
	put '                    n = nodes.length,';
	put '                    i;';
	put ' ';
	put '                // Push any overlapping nodes down.';
	put '                nodes.sort(ascendingDepth);';
	put '                for (i = 0; i < n; ++i) {';
	put '                    node = nodes[i];';
	put '                    dy = y0 - node.y;';
	put '                    if (dy > 0) node.y += dy;';
	put '                    y0 = node.y + node.dy + nodePadding;';
	put '                }';
	put ' ';
	put '                // If the bottommost node goes outside the bounds, push it back up.';
	put '                dy = y0 - nodePadding - size[1];';
	put '                if (dy > 0) {';
	put '                    y0 = node.y -= dy;';
	put ' ';
	put '                    // Push any overlapping nodes back up.';
	put '                    for (i = n - 2; i >= 0; --i) {';
	put '                        node = nodes[i];';
	put '                        dy = node.y + node.dy + nodePadding - y0;';
	put '                        if (dy > 0) node.y -= dy;';
	put '                        y0 = node.y;';
	put '                    }';
	put '                }';
	put '            });';
	put '        }';
	put ' ';
	put '        function ascendingDepth(a, b) {';
	put '            return a.y - b.y;';
	put '        }';
	put '    }';
	put ' ';
	put '    function computeLinkDepths() {';
	put '        nodes.forEach(function (node) {';
	put '            node.sourceLinks.sort(ascendingTargetDepth);';
	put '            node.targetLinks.sort(ascendingSourceDepth);';
	put '        });';
	put '        nodes.forEach(function (node) {';
	put '            var sy = 0,';
	put '                ty = 0;';
	put '            node.sourceLinks.forEach(function (link) {';
	put '                link.sy = sy;';
	put '                sy += link.dy;';
	put '            });';
	put '            node.targetLinks.forEach(function (link) {';
	put '                link.ty = ty;';
	put '                ty += link.dy;';
	put '            });';
	put '        });';
	put ' ';
	put '        function ascendingSourceDepth(a, b) {';
	put '            return a.source.y - b.source.y;';
	put '        }';
	put ' ';
	put '        function ascendingTargetDepth(a, b) {';
	put '            return a.target.y - b.target.y;';
	put '        }';
	put '    }';
	put ' ';
	put '    function center(node) {';
	put '        return node.y + node.dy / 2;';
	put '    }';
	put ' ';
	put '    function value(link) {';
	put '        return link.value;';
	put '    }';
	put ' ';
	put '    return sankey;';
	put '};';
	put ' ';
	put ' ';
	put '/* ------------------- our code ------------------------ */';
	put '//var canvas = document.getElementById("chart");';
	put ' ';
	put 'var units = "Widgets";';
	put ' ';
	put 'var margin = {';
	put '    top: 10,';
	put '    right: 10,';
	put '    bottom: 10,';
	put '    left: 10';
	put '},';
	/****ADJUST WIDTH AND HEIGHT****/
	put "width = &width - margin.left - margin.right,";
	/*******************************/
	put "    height = &height - margin.top - margin.bottom;";
	put ' ';
	put 'var formatNumber = d3.format(",.0f"), // zero decimal places';
	put '    format = function (d) {';
	put '        return formatNumber(d) + " " + units;';
	put '    },';
	put '    color = d3.scale.category20();';
	put '    ';
	put '// append the svg canvas to the page';
	put 'var svg = d3.select("#chart").append("svg")';
	put '    .attr("width", width + margin.left + margin.right)';
	put '    .attr("height", height + margin.top + margin.bottom)';
	put '    .append("g")';
	put '    .attr("transform",';
	put '    "translate(" + margin.left + "," + margin.top + ")");';
	put ' ';
	put '// Set the sankey diagram properties';
	put 'var sankey = d3.sankey()';
	put '    .nodeWidth(10)';
	put '    .nodePadding(20)';
	put '    .size([width, height]);';
	put ' ';
	put 'var path = sankey.link();';
	put ' ';
	put ' ';
	put 'var data = [';

	put "&in_data.";

	put ']; ';
	put ' ';
	put '//set up graph in same style as original example but empty';
	put 'graph = {';
	put '    "nodes": [],';
	put '        "links": []';
	put '};';
	put ' ';
	put 'data.forEach(function (d) {';
	put '    graph.nodes.push({';
	put '        "name": d.source';
	put '    });';
	put '    graph.nodes.push({';
	put '        "name": d.target';
	put '    });';
	put '    graph.links.push({';
	put '        "source": d.source,';
	put '            "target": d.target,';
	put '            "value": +d.value';
	put '    });';
	put '});';
	put ' ';
	put '// return only the distinct / unique nodes';
	put 'graph.nodes = d3.keys(d3.nest()';
	put '    .key(function (d) {';
	put '    return d.name;';
	put '})';
	put '    .map(graph.nodes));';
	put ' ';
	put '// loop through each link replacing the text with its index from node';
	put 'graph.links.forEach(function (d, i) {';
	put '    graph.links[i].source = graph.nodes.indexOf(graph.links[i].source);';
	put '    graph.links[i].target = graph.nodes.indexOf(graph.links[i].target);';
	put '});';
	put ' ';
	put '//now loop through each nodes to make nodes an array of objects';
	put '// rather than an array of strings';
	put 'graph.nodes.forEach(function (d, i) {';
	put '    graph.nodes[i] = {';
	put '        "name": d';
	put '    };';
	put '});';
	put ' ';
	put 'sankey.nodes(graph.nodes)';
	put '    .links(graph.links)';
	put '    .layout(32);';
	put ' ';
	put '// add in the links';
	put 'var link = svg.append("g").selectAll(".link")';
	put '    .data(graph.links)';
	put '    .enter()';
	put '    .append("path")';
	put '    .attr("class", "link")';
	put '    .attr("id",function(d,i) { return "linkLabel" + i; })';
	put '    .attr("d", path)';
	put '    .style("stroke-width", function (d) {';
	put '       return Math.max(1, d.dy);';
	put '    })';
	put '    .sort(function (a, b) {';
	put '       return b.dy - a.dy;';
	put '    })';
	put ' ';
	put ' ';
	put ' ';
	put '// add in the nodes';
	put 'var node = svg.append("g").selectAll(".node")';
	put '    .data(graph.nodes)';
	put '    .enter().append("g")';
	put '    .attr("class", "node")';
	put '    .attr("transform", function (d) {';
	put '    return "translate(" + d.x + "," + d.y + ")";';
	put '})';
	put '    .call(d3.behavior.drag()';
	put '    .origin(function (d) {';
	put '    return d;';
	put '})';
	put '    .on("dragstart", function () {';
	put '    this.parentNode.appendChild(this);';
	put '})';
	put '    .on("drag", dragmove));';
	put ' ';
	put '// add the rectangles for the nodes';
	put 'node.append("rect")';
	put '    .attr("height", function (d) {';
	put '    return d.dy;';
	put '})';
	put '    .attr("width", sankey.nodeWidth())';
	put '    .style("fill", function (d) {';
	put '    return d.color = color(d.name.replace(/ .*/, ""));';
	put '})';
	put '    .style("stroke", function (d) {';
	put '    return d3.rgb(d.color);//.darker(2);';
	put '})';
	put '    .append("title")';
	put '    .text(function (d) {';
	put '    return d.name + "\n" + format(d.value);';
	put '});';
	put ' ';
	put '// add in the title for the nodes';
	put 'node.append("text")';
	put '    .attr("x", -6)';
	put '    .attr("y", function (d) {';
	put '    return d.dy / 2;';
	put '})';
	put '    .attr("dy", ".35em")';
	put '    .attr("text-anchor", "end")';
	put '    .attr("transform", null)';
	put '    .text(function (d) {';
	put '    return d.name + " (" + d.value + ")";';
	put '})';
	put '    .filter(function (d) {';
	put '    return d.x < width / 2;';
	put '})';
	put '    .attr("x", 6 + sankey.nodeWidth())';
	put '    .attr("text-anchor", "start");';
	put ' ';
	put '/* add labels to graphs */';
	put 'var labelText = svg.selectAll(".labelText")';
	put '    .data(graph.links)';
	put '    .enter()';
	put '  .append("text")';
	put '    .attr("class","labelText")';
	put '    .attr("dx",130)';
	put '    .attr("dy",0)';
	put '  .append("textPath")';
	put '    .attr("xlink:href",function(d,i) { return "#linkLabel" + i;})';
	put '    .text(function(d,i)                                  ';
	put '     {                                 ';
	%if &flow_num. > 0 %then %do;
		put "       if (d.value > &flow_num.) return ' -> ' + d.target.name + ' : ' + d.value;";
	%end;
	put '      }';
	put '      );';
	put '//				if (d.value > 10) return " -> " + d.value + " -> ";});';
	put ' ';
	put '// the function for moving the nodes';
	put 'function dragmove(d) {';
	put '    d3.select(this).attr("transform",';
	put '        "translate(" + d.x + "," + (';
	put '    d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))) + ")");';
	put '    sankey.relayout();';
	put '    link.attr("d", path);';
	put '}';
	put ' ';
	put ' ';
	put ' ';
	put ' ';
	put '    }';
	put ' ';
	put '  //]]></script>';
	put ' ';
	put '</head>';
	put '<body>';
	put '    <p id="chart"></p>';
	put ' ';
	put ' ';
	put ' ';
	put '  ';
	put '  <script>';
	put '    // tell the embed parent frame the height of the content';
	put '    if (window.parent && window.parent.parent){';
	put '      window.parent.parent.postMessage(["resultsFrame", {';
	put '        height: document.body.getBoundingClientRect().height,';
	put '        slug: "Lsjkhzf1"';
	put '      }], "*")';
	put '    }';
	put ' ';
	put '    // always overwrite window.name, in case users try to set it manually';
	put '    window.name = "result"';
	put '  </script>';
	put '</body>';
	put '</html>';

	;;;;

	run;

%mend sankey2html;



